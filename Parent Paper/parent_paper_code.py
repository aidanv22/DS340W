# -*- coding: utf-8 -*-
"""PARENT_PAPER_CODE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TdbrXmlrbuo-Bnd38YGHq2BE2OIUv6g3
"""

import pandas as pd
import numpy as np
import time

Train = pd.read_csv("train-1.csv")
Train.info()

Train.head(10)

Train.describe()

"""## DATA CLEANING"""

import numba

# Clear invalid data: Exclude the data that has not experienced any sports training for 7 days
@numba.njit(parallel=True)
def judge_sum(a, b, c, d, e, f, g):
    return a + b + c + d + e + f + g

def DataClear(data):
    columns_original = data.columns
    data_original = data.values
    judge = judge_sum(data_original[:, 0],
                      data_original[:, 10],
                      data_original[:, 20],
                      data_original[:, 30],
                      data_original[:, 40],
                      data_original[:, 50],
                      data_original[:, 60])

    index = np.where(judge != 0)
    data_new = data_original[index]
    return pd.DataFrame(data_new, columns=columns_original)

import time

start = time.time()
Train_Clear = DataClear(Train)
end = time.time()

print("Train samples:", Train_Clear.shape[0], "time:", end - start)

Train_Clear.describe()

def Padding(data):
    day_7 = data[0:10]
    day_6 = data[10:20]
    day_5 = data[20:30]
    day_4 = data[30:40]
    day_3 = data[40:50]
    day_2 = data[50:60]
    day_1 = data[60:70]
    day_8 = np.zeros(10, dtype=float)  # padding
    data_reshape = np.vstack((day_1, day_2, day_3, day_4,
                              day_5, day_6, day_7, day_8))
    return data_reshape

@numba.njit()
def TransformInt(data):
    return int(data)

def List_to_arr(data_list, data):
    new_data = []
    data_information = []

    for i in range(len(data_list)):
        temp_feature = data_list[i]
        temp_information = data[i]
        if np.sum(temp_feature[:, 0]) != 0:
            new_data.append(temp_feature)
            data_information.append(temp_information)

    new_data = np.array(new_data)
    data_information = np.array(data_information)
    ID = data_information[:, 0]
    Label = np.array(list(map(TransformInt, data_information[:, 1])))
    Date = data_information[:, 2]

    return new_data, ID, Label, Date

import time

start = time.time()

Train_reshape = list(map(Padding, Train_Clear.values))
Train_Feature, Train_ID, Train_Label, Train_Date = List_to_arr(Train_reshape, Train_Clear.values)

end = time.time()

print("time:", end - start,
      f"\nOriginal TrainSet: {np.array(Train_reshape).shape}")

"""## GRAMIAN ANGULAR FIELD"""

n_sample = 27999

import matplotlib.pyplot as plt

X_new = Train_Feature[n_sample, :, 1]  # With "total km" for example
X_sample = [list(range(0, 8, 1)), X_new]

fig = plt.figure(figsize=(3, 2), dpi=300, edgecolor='black')
plt.plot(X_sample[0], X_sample[1])

plt.xlabel("day")
plt.ylabel("total km")
plt.tight_layout()
plt.show()

# pip install pyts

from pyts.preprocessing import MinMaxScaler

# normalization
scaler = MinMaxScaler()
X_sample_scaler = scaler.transform(X_sample)

fig = plt.figure(figsize=(3, 2), dpi=300, edgecolor='black')
plt.plot(X_sample_scaler[0, :], X_sample_scaler[1, :])

plt.xlabel("timestamp")
plt.ylabel("total km")
plt.tight_layout()
plt.show()

arccos_X = np.arccos(X_sample_scaler[1, :])
fig, ax = plt.subplots(figsize=(6, 4), dpi=300, subplot_kw={'projection': 'polar'})
ax.plot(X_sample[0], arccos_X)
ax.set_rmax(2)
ax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks
ax.set_rlabel_position(-22.5)     # Move radial labels away from plotted line
ax.grid(True)
ax.set_title("Polar coordinates", va='bottom')
plt.tight_layout()
plt.show()

from matplotlib.pyplot import MultipleLocator

fig = plt.figure(figsize=(3, 2), dpi=300, edgecolor='black')
field = [a + b for a in arccos_X for b in arccos_X]
gram = np.cos(field).reshape(8, 8)

plt.imshow(pd.DataFrame(gram).rename(
    index={0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8},
    columns={0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8}
))

ax = plt.gca()
major_locator = MultipleLocator(1)
ax.xaxis.set_major_locator(major_locator)
ax.yaxis.set_major_locator(major_locator)
plt.tight_layout()
plt.colorbar()

fig = plt.figure(figsize=(3, 2), dpi=300, edgecolor='black')
field = [a - b for a in arccos_X for b in arccos_X]
gram = np.sin(field).reshape(8, 8)
plt.imshow(pd.DataFrame(gram).rename(
    index={0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8},
    columns={0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8}
))
ax = plt.gca()
major_locator = MultipleLocator(1)
ax.xaxis.set_major_locator(major_locator)
ax.yaxis.set_major_locator(major_locator)
plt.imshow(gram, cmap='rainbow')
plt.tight_layout()
plt.colorbar()

"""## MARKOV TRANSITION FIELD TRANSFORMATION"""

X_new = X_sample_scaler[1, :]

from pyts.preprocessing.discretizer import KBinsDiscretizer

n_bins = 5
strategy = 'quantile'
discretizer = KBinsDiscretizer(n_bins=n_bins, strategy=strategy, raise_warning=False)
X = X_new.reshape(1, -1)
X_disc = discretizer.fit_transform(X)[0]
X_disc

m_adj = np.zeros((n_bins, n_bins))
for k in range(len(X_disc) - 1):
    # matrix iteration
    index = X_disc[k]
    next_index = X_disc[k+1]
    m_adj[next_index][index] += 1

print(m_adj)

mtm = m_adj / m_adj.sum(axis=0)
print(mtm)

n_t = len(X_disc)
mtf = np.zeros((n_t, n_t))

for i in range(n_t):
    for j in range(n_t):
        mtf[i, j] = mtm[X_disc[i]][X_disc[j]] * 100

mtf

fig = plt.figure(figsize=(3, 2), dpi=300, edgecolor='black')
plt.imshow(pd.DataFrame(mtf).rename(
    index={0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8},
    columns={0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8}
))
ax = plt.gca()
major_locator = MultipleLocator(1)
ax.xaxis.set_major_locator(major_locator)
ax.yaxis.set_major_locator(major_locator)
plt.tight_layout()
plt.colorbar()
plt.show()

"""## RECCURENCE PLOT TRANSFORMATION"""

from scipy.spatial.distance import pdist, squareform

eps = 0.10
steps = 10
d = pdist(X_new[:, None])
d = np.floor(d / eps)
d[d > steps] = steps
Z = squareform(d)
d

Z

fig = plt.figure(figsize=(3, 2), dpi=300, edgecolor='black')
plt.imshow(pd.DataFrame(Z).rename(
    index={0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8},
    columns={0:1, 1:2, 2:3, 3:4, 4:5, 5:6, 6:7, 7:8}
))
ax = plt.gca()
major_locator = MultipleLocator(1)
ax.xaxis.set_major_locator(major_locator)
ax.yaxis.set_major_locator(major_locator)
plt.tight_layout()
plt.colorbar()
plt.show()